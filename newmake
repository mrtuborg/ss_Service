root_include_dir    := include		# Defines variable with name of root directory with headers files
root_source_dir     := src		# Defines variable with name of root directiry with sources

# Defines variable with names of subdirectories of root sources directory
source_subdirs      := . arg_parser buffer deqUdp functions srvAppLayer srvAppLayer/functionNode
compile_flags       := -Wall -MD -pipe	# Common compilation flags
link_flags      := -s -pipe		# Common linker flags
libraries       := -lX11 -ldl		# Libraries that need to be additioanally linked with objects
 
# relativies paths
relative_include_dirs   := $(addprefix ../../, $(root_include_dir))
relative_source_dirs    := $(addprefix ../../$(root_source_dir)/, $(source_subdirs))

# list of all directories to make objects
objects_dirs        := $(addprefix $(root_source_dir)/, $(source_subdirs))

# list of all source files
objects         := $(patsubst ../../%, %, $(wildcard $(addsuffix /*.c*, $(relative_source_dirs))))

# extension cpp change to o
objects         := $(objects:.cpp=.o)

# extension c channge to o
objects         := $(objects:.c=.o)
  

# First rule: Project target
$(program_name) : $(objects_dirs) $(objects)
	g++ -o $@ $(objects) $(link_flags) $(libraries)
   
# Second rule: Create debug or release directory
$(objects_dirs) :
	mkdir -p $@
    
VPATH := ../../
    
# Targets for object files
%.o : %.cpp
	g++ -o $@ -c $&lt; $(compile_flags) $(build_flags) $(addprefix -I, $(relative_include_dirs))

%.o : %.c
	g++ -o $@ -c $&lt; $(compile_flags) $(build_flags) $(addprefix -I, $(relative_include_dirs))

.PHONY : clean

clean :
	rm -rf bin obj
	include $(wildcard $(addsuffix /*.d, $(objects_dirs)))

